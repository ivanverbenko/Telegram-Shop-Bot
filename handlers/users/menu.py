from aiogram import Router, types, F
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, CallbackQuery

from database.orm import ProductsDao, OrdersDao
from keybroads import categories, products, product, confirmation_keyboard, main

catalog_button = KeyboardButton(text="–ö–∞—Ç–∞–ª–æ–≥")
cart_button = KeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞")
delivery_status_button = KeyboardButton(text="–°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏")

settings = '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞'
orders = 'üöö –ó–∞–∫–∞–∑—ã'
questions = '‚ùì –í–æ–ø—Ä–æ—Å—ã'

router = Router()

@router.message(CommandStart())
async def cmd_start(message: types.Message):
    user_button = KeyboardButton(text="–ö–∞—Ç–∞–ª–æ–≥")
    status_delivery = KeyboardButton(text='–°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏')

    markup = ReplyKeyboardMarkup(
        keyboard=[
            [user_button, status_delivery]
        ],
        resize_keyboard=True
    )

    await message.answer('''–ü—Ä–∏–≤–µ—Ç! üëã

ü§ñ –Ø –±–æ—Ç-–º–∞–≥–∞–∑–∏–Ω –ø–æ –ø–æ–¥–∞–∂–µ —Ç–æ–≤–∞—Ä–æ–≤ –ª—é–±–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    ''', reply_markup=markup)

@router.message(F.text=='–ö–∞—Ç–∞–ª–æ–≥')
async def catalog(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞", reply_markup= await categories())

@router.message(F.text == '–°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏')
async def track_order(message: types.Message):
    orders = await OrdersDao.find_by(user_tg=message.from_user.id)
    for order in orders:
        delivered_status = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω" if order.delivered else "–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω"
        await message.answer(
            f"–ó–∞–∫–∞–∑ #{order.id}:\n"
            f"–ê–¥—Ä–µ—Å: {order.addres}\n"
            f"–°—Ç–∞—Ç—É—Å: {order.status}\n"
            f"–¶–µ–Ω–∞: {order.price}\n"
            f"–î–æ—Å—Ç–∞–≤–∫–∞: {delivered_status}"
        )

@router.callback_query(F.data.startswith('category_'))
async def category_selected(callback: CallbackQuery):
    category_id = callback.data.split('_')[-1]
    await callback.message.answer(f'–¢–æ–≤–∞—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ', reply_markup= await products(category_id))

@router.callback_query(F.data.startswith('product_'))
async def product_selected(callback: CallbackQuery):
    product_id = int(callback.data.split('_')[-1])
    product_obj = await ProductsDao.get_by_id(id=product_id)
    await callback.message.answer(f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ:\n–¢–æ–≤–∞—Ä: {product_obj.name}\n–¶–µ–Ω–∞: {product_obj.price} ',
                                  reply_markup= await product(product_id))
@router.message(Command(commands='menu'))
async def user_menu(message: types.Message):
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ç–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    markup = main

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer('–ú–µ–Ω—é', reply_markup=markup)

class CheckoutState(StatesGroup):
    input_name = State()
    input_address = State()
    confirm_order = State()

@router.message(StateFilter('*'), F.text == '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑')
async def cancel_order(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


@router.callback_query(F.data.startswith('order_'))
async def start_checkout(callback: CallbackQuery, state: FSMContext):
    product_id = int(callback.data.split('_')[-1])
    await state.update_data(product_id=product_id)

    await state.set_state(CheckoutState.input_name)
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")



@router.message(StateFilter(CheckoutState.input_name))
async def input_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(CheckoutState.input_address)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å:")


@router.message(StateFilter(CheckoutState.input_address))
async def input_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    await state.set_state(CheckoutState.confirm_order)
    user_data = await state.get_data()
    product_id = user_data.get('product_id')
    product_obj = await ProductsDao.get_by_id(id=product_id)

    confirmation_text = (
        f"–í–∞—à –∑–∞–∫–∞–∑:\n"
        f"–¢–æ–≤–∞—Ä: {product_obj.name}\n"
        f"–¶–µ–Ω–∞: {product_obj.price}\n"
        f"–ò–º—è: {user_data['name']}\n"
        f"–ê–¥—Ä–µ—Å: {user_data['address']}\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ."
    )

    await message.answer(
        text=confirmation_text,
        reply_markup=confirmation_keyboard()
    )


@router.callback_query(StateFilter(CheckoutState.confirm_order))
async def handle_confirmation(callback: CallbackQuery, state: FSMContext):
    markup=main
    if callback.data == 'confirm_yes':
        user_data = await state.get_data()
        product_id = user_data.get('product_id')
        product_obj = await ProductsDao.get_by_id(id=product_id)
        await OrdersDao.add_item(addres=user_data['address'],status='–∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω',
                                 delivered=False, user_tg=callback.from_user.id, product_id=product_id,
                                 price = product_obj.price)
        await callback.message.answer(
            f"–í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ —Ç–æ–≤–∞—Ä '{product_obj.name}'"
            f" –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n–ò–º—è: {user_data['name']}\n"
            f"–ê–¥—Ä–µ—Å: {user_data['address']}\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!",
            reply_markup=markup
        )
    elif callback.data == 'confirm_no':
        await callback.message.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.",reply_markup=markup)

    await state.clear()
